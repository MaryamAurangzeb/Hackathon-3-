.env file  
Setting up the Environment Variables
Ensure you add the necessary environment variables in your .env file for the Sanity client setup:

env

SANITY_PROJECT_ID=your-project-id
SANITY_DATASET=production

  Data migration to sanity CMS'
  Data Migration to Sanity CMS
Sanity CMS requires data to be in a specific schema format. You've already linked to the schema files for the product and category. Now, let's write a migration script that fetches data from the API and sends it to your Sanity CMS.

First, install the Sanity client:

bash

npm install @sanity/client
Now, set up the Sanity client in your migration script:

js

// lib/sanityClient.js
import sanityClient from '@sanity/client';

const client = sanityClient({
  projectId: 'your-project-id',
  dataset: 'production',
  useCdn: true, // Use the CDN for faster access to public data
});

export default client;
Then, create a script that will handle the migration:

js

// scripts/migrateData.js
import fetch from 'node-fetch';
import client from '../lib/sanityClient';

const fetchData = async () => {
  const res = await fetch('https://hackathon-apis.vercel.app/api/products');
  return await res.json();
};

const migrateData = async () => {
  const products = await fetchData();

  for (const product of products) {
    const doc = {
      _type: 'product',
      name: product.name,
      price: product.price,
      description: product.description,
      imageUrl: product.imageUrl,
    };

    try {
      await client.createOrReplace(doc);
      console.log(Product ${product.name} migrated successfully);
    } catch (err) {
      console.error('Error migrating product:', err);
    }
  }
};

migrateData();
This script will fetch data from the API and insert it into your Sanity CMS. 
  You can extend it for categories or other entities as per your schema.

  README.md
  # API-Integration-and-data-migration

Description for Day 3: API Integration and Data Migration

This repository contains resources, scripts, and documentation for Day 3 of the API Integration and Data Migration module. The focus is on integrating APIs and migrating data into Sanity CMS to create a functional backend for an e-commerce marketplace.

Key Features:

API Integration: Learn to fetch and display data dynamically in Next.js.

Data Migration: Scripts for seamless data transfer into Sanity CMS.

Custom Schemas: Pre-built schemas for products, categories, and other e-commerce entities.

Error Handling: Best practices for managing API errors and validating data.

Documentation: Includes a PDF guide and sample scripts for hands-on practice.


Project Highlights:

1. Utilize APIs like Shopify, WooCommerce, and custom backends for data integration.


2. Follow schema validation techniques to align CMS with real-world e-commerce data.


3. Explore modular code practices for scalable projects.



How to Use This Repository:

1. Clone the repository:

git clone https://github.com/<your-username>/Day-3-API-Integration.git


2. Install dependencies:

npm install


3. Set up environment variables using the provided .env.example.


4. Run the API integration and migration scripts.



Ideal for developers looking to enhance their skills in API-driven development and CMS integration.

Feel free to fork, clone, and explore this repository!


---

Let me know if you need any adjustments or further details!

  fetch-product.ts
  // pages/api/fetchProducts.js
import fetch from 'node-fetch';

export default async function handler(req, res) {
  const response = await fetch('https://hackathon-apis.vercel.app/api/products');
  const data = await response.json();
  
  if (response.ok) {
    res.status(200).json(data);
  } else {
    res.status(500).json({ message: 'Failed to fetch data' });
  }
}

Now, you can fetch this data on the frontend in your Next.js app.

js

// pages/products.js
import { useEffect, useState } from 'react';

export default function Products() {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const res = await fetch('/api/fetchProducts');
      const data = await res.json();
      setProducts(data);
    };
    fetchData();
  }, []);

  return (
    <div>
      <h1>Products</h1>
      <ul>
        {products.map((product) => (
          <li key={product.id}>{product.name}</li>
        ))}
      </ul>
    </div>
  );
}

product.ts
  3. Sanity Schema Example (Product Schema)
Here’s an example schema for a product in Sanity CMS (you’ve already linked to this in your GitHub repo):

ts

// schema/product.ts
export default {
  name: 'product',
  title: 'Product',
  type: 'document',
  fields: [
    {
      name: 'name',
      title: 'Name',
      type: 'string',
    },
    {
      name: 'price',
      title: 'Price',
      type: 'number',
    },
    {
      name: 'description',
      title: 'Description',
      type: 'text',
    },
    {
      name: 'imageUrl',
      title: 'Image URL',
      type: 'url',
    },
  ],
};

run migration script
  Running the Migration Script
To run the migration script, you can either run it directly via Node.js from the command line:

bash

node scripts/migrateData.js

Or, if you prefer, you can create a custom API endpoint in Next.js for triggering the migration.
